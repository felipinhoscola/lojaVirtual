@page "/produtos"
@rendermode RenderMode.InteractiveWebAssembly
@inject IProdutoService produtoService

@if (Produtos == null)
{
    <ExibirSpinner />
}
else
{
    <h3 class="mb-5">Produtos</h3>
    @if (Produtos.Count() > 0)
    {
        //Consulta LINQ serve para agrupamento, ordenação, busca, entre outros. atráves de dados em JSON Ou XML.
        var produtoPorCategoria = from produto in Produtos //Define a fonte de dados
                                  group produto by produto.CategoriaId into prodPorCatGrupo //Produtos agrupados pela propriedade CategoriaID.
                                  orderby prodPorCatGrupo.Key //organiza os grupos com base na chave CategoriaId
                                  select prodPorCatGrupo; //Seleciona um sequencia de grupos, onde o grupo contem a mesma CategoriaId

        @foreach(var prodGrupo in produtoPorCategoria) //Foreach passa pro cada grupo de categoria
        {
            <h4>@prodGrupo.FirstOrDefault(pg=> pg.CategoriaId == prodGrupo.Key).CategoriaNome</h4>
            <div class="row mt-3">
                <ExibirProdutos Produtos="@prodGrupo"></ExibirProdutos>
            </div>
            <hr class="mb-2" />
        }
        
    }
}

@code {
    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    [Inject]
    public ICarrinhoCompraService? carrinhoCompraService { get; set; }

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService gerenciaCarrinhoLocalS { get; set; }

    [Inject]
    public IGerenciaProdutosLocalStorageService gerenciaProdutoLocalS { get; set; }

    public string? MensagemErro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LimpaLocalStorage();

            Produtos = await gerenciaProdutoLocalS.GetCollection();

            var carrinhoCompraItens = await gerenciaCarrinhoLocalS.GetCollection();

            var totalQuantidade = carrinhoCompraItens.Sum(i => i.Quantidade);

            carrinhoCompraService.RaiseEventOnCarrinhoCompraChanged(totalQuantidade);
        }
        catch (Exception ex)
        {

            MensagemErro = ex.Message;
        }
        
    }

    private async Task LimpaLocalStorage()
    {
        await gerenciaCarrinhoLocalS.RemoveCollection();
        await gerenciaProdutoLocalS.RemoveCollection();
    }
}