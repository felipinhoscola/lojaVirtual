@page "/ProdutoDetalhes/{Id:int}"

@if(Produto is null && MensagemErro is null)
{
    <ExibirSpinner />
}else if(MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
} else
{
    <h3 class="mb-5">Detalhes do Produto</h3>
    <div class="row">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@Produto.ImagemUrl"/>
        </div>
        <div class="col-md-6">
            <h3>@Produto.Nome</h3>
            <p class="mb-4">@Produto.Descricao</p>
            <p class="mb-4">
                <b>
                    @Produto.Preco.ToString("c")&nbsp;(@Produto.Quantidade itens em estoque)
                </b>
            </p>
            <div>
                <button class="btn btn-success" @onclick="()=>AdicionarAoCarrinho_Click(new CarrinhoItemAdicionaDto{
                                                            CarrinhoId = UsuarioLogado.CarrinhoId, ProdutoId = Produto.Id, Quantidade = 1})">
                                                            Incluir no Carrinho</button>
            </div>
        </div>
    </div>
}



@code {
    [Inject]   
    public IProdutoService? ProdutoService { get; set; }

    [Inject]
    public ICarrinhoCompraService? carrinhoCompraService { get; set; }

    [Inject]
    public NavigationManager? navigationManager { get; set; }   

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService gerenciaCarrinhoLocalS { get; set; }

    [Inject]
    public IGerenciaProdutosLocalStorageService gerenciaProdutoLocalS { get; set; }

    public List<CarrinhoItemDto>? carrinhoCompraItens { get; set; }

    [Parameter]
    public int Id { get; set; }
    public ProdutoDto? Produto { get; set; }
    public string? MensagemErro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carrinhoCompraItens = await gerenciaCarrinhoLocalS.GetCollection();
            //Produto = await ProdutoService.GetProdutoById(Id);
            Produto = await GetProdutoPorId(Id);
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task AdicionarAoCarrinho_Click(CarrinhoItemAdicionaDto carrinhoItemAdicionaDto)
    {
        try
        {
            var carrinhoItemDto = await carrinhoCompraService.AdicionaItem(carrinhoItemAdicionaDto);
            if(carrinhoItemDto != null)
            {
                carrinhoCompraItens.Add(carrinhoItemDto);
                await gerenciaCarrinhoLocalS.SaveCollection(carrinhoCompraItens);
            }
            navigationManager.NavigateTo("/CarrinhoCompra");
        }
        catch (Exception)
        {
            throw new Exception ("Erro ao adicionar item ao carrinho");
        }
    }

    private async Task<ProdutoDto> GetProdutoPorId(int id)
    {
        var produtosDto = await gerenciaProdutoLocalS.GetCollection();
        if (produtosDto != null)
            return produtosDto.SingleOrDefault(p => p.Id == id);

        return null;
    }
}

