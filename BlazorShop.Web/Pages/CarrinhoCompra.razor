@page "/CarrinhoCompra"
@inject IJSRuntime Js;

@if (carrinhoCompraItens is null && MensagemErro is null)
{
<ExibirSpinner />
}else if(MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
} else
{
    <h3 class="mb-5">Carrinho</h3>
    @if(carrinhoCompraItens.Count() > 0)
    {
        <div class="row mb-5">
            <div class="col-md-9">
                @foreach(var item in carrinhoCompraItens)
                {
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <img src="@item.ProdutoImagemURL" width="250" class="img-thumbnail"/>
                        </div>
                        <div class="col-md-9">
                            <h5>@item.ProdutoNome</h5>
                            <div class="mb-4">@item.ProdutoDescricao</div>
                            <span>Preço: <b>@item.Preco.ToString("C")</b>
                                <input @oninput="()=>AtualizaQuantidade_Input(item.Id)" type="number" @bind="@item.Quantidade"/>
                                <button class="btn btn-info btn-sm atualizaquantidade" data-ItemId="@item.Id" @onclick="(() => AtualizaQuantidadeCarrinhoItem_Click(item.Id, item.Quantidade))">
                                        <i class="bi bi-check"></i>
                                </button>
                                <br />
                                <button class="btn btn-danger sm" @onclick = "(()=> DeletaCarrinhoItem_Click(item.Id))">
                                    <span class="bi bi-trash"></span>    
                                </button>
                            </span>
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-3">
                <h5>Carrinho - Resumo</h5>
                <div class="mt-2">
                    <div>Total - (@QuantidadeTotal items)&nbsp;<br/><b>@PrecoTotal</b></div>
                    <a href="#" class="btn btn-success">
                        <span class="bi bi-credit-card"></span>&nbsp; Fechar Pedido
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div>
            <h3><b>Seu carrinho esta vazio</b></h3>
        </div>
    }
}

@code {
    [Inject]
    public ICarrinhoCompraService? carrinhoCompraService { get; set; }

    public List<CarrinhoItemDto>? carrinhoCompraItens { get; set; }

    public string? MensagemErro { get; set; }
    protected string? PrecoTotal { get; set; }
    protected int QuantidadeTotal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carrinhoCompraItens = await carrinhoCompraService.GetItens(UsuarioLogado.UsuarioId);
            CarrinhoChanged();
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task DeletaCarrinhoItem_Click(int id)
    {
        //excluir o item do bando de dados do carrinho usuario
        var carrinhoItemDto = await carrinhoCompraService.DeletaItem(id);

        //remoção do item da coileção de objetos da memoria no cliente
        await RemoveCarrinhoItem(id);

        CarrinhoChanged();
    }

    private CarrinhoItemDto GetCarrinhoItem(int id)
    {
        return carrinhoCompraItens.FirstOrDefault(i => i.Id == id);
    }

    private async Task RemoveCarrinhoItem(int id)
    {
        var carrinhoItemDto = GetCarrinhoItem(id);
        carrinhoCompraItens.Remove(carrinhoItemDto);
    }

    protected async Task AtualizaQuantidadeCarrinhoItem_Click(int id, int quantidade)
    {
        try
        {
            if(quantidade > 0)
            {
                var atualizaItemDto = new CarrinhoItemAtualizaQuantidadeDto
                {
                    CarrinhoItemId = id,
                    Quantidade = quantidade
                };

                var retornaItemAtualizadoDto = await carrinhoCompraService.AtualizaQuantidade(atualizaItemDto);

                AtualizaPrecoTotalItem(retornaItemAtualizadoDto);
                CarrinhoChanged();
                await Js.InvokeVoidAsync("HiddenAttQntBtn", id, false);
            }
            else
            {
                var item = carrinhoCompraItens.FirstOrDefault(i => i.Id == id);
                if(item is not null)
                {
                    item.Quantidade = 1;
                    item.PrecoTotal = item.Preco;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void SetPrecoTotal()
    {
        PrecoTotal = carrinhoCompraItens.Sum(p => p.PrecoTotal).ToString("C");
    }

    private void SetQuantidadeTotal()
    {
        QuantidadeTotal = carrinhoCompraItens.Sum(p => p.Quantidade);
    }

    private void CalculaResumoCarrinhoTotal()
    {
        SetPrecoTotal();
        SetQuantidadeTotal();
    }

    private void AtualizaPrecoTotalItem(CarrinhoItemDto carrinhoItemDto)
    {
        var item = GetCarrinhoItem(carrinhoItemDto.Id);
        if (item != null)
            item.PrecoTotal = carrinhoItemDto.Preco * carrinhoItemDto.Quantidade;
    }

    protected async Task AtualizaQuantidade_Input(int id)
    {
        await Js.InvokeVoidAsync("HiddenAttQntBtn", id, true);
    }

    private void CarrinhoChanged()
    {
        CalculaResumoCarrinhoTotal();
        carrinhoCompraService.RaiseEventOnCarrinhoCompraChanged(QuantidadeTotal);
    }
}
